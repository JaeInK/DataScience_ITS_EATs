theme_classic(base_family="AppleGothic") +
facet_wrap(~continent) +
theme(legend.position = "none")
gapminder_g <- gapminder_aa_df %>%
ggplot(aes(x=gdpPercap, y=lifeExp, color=continent, text=paste0("1인당 GDP:", gdpPercap))) +
geom_jitter(alpha=0.1) +
scale_x_log10(labels = scales::comma) +
scale_y_continuous(labels = scales::percent) +
labs(title="1인당 국민소득과 기대수명",
subtitle="UN 5년 시계열 데이터",
color="대륙",
x="1인당 국민소득",
y="기대수명",
caption="자료출처: http://www.tidyverse.com")  +
theme_classic(base_family="AppleGothic") +
facet_wrap(~continent) +
theme(legend.position = "none")
ggplotly(gapminder_g, tooltip="text")
gapminder_g <- gapminder_aa_df %>%
ggplot(aes(x=gdpPercap, y=lifeExp, color=continent, text=paste0("1인당 GDP:", gdpPercap,"\n","기대수명?"))) +
geom_jitter(alpha=0.1) +
scale_x_log10(labels = scales::comma) +
scale_y_continuous(labels = scales::percent) +
labs(title="1인당 국민소득과 기대수명",
subtitle="UN 5년 시계열 데이터",
color="대륙",
x="1인당 국민소득",
y="기대수명",
caption="자료출처: http://www.tidyverse.com")  +
theme_classic(base_family="AppleGothic") +
facet_wrap(~continent) +
theme(legend.position = "none")
ggplotly(gapminder_g, tooltip="text")
gapminder_g <- gapminder_aa_df %>%
ggplot(aes(x=gdpPercap, y=lifeExp, color=continent, text=paste0("1인당 GDP:", gdpPercap,"\n","기대수명?", lifeExp))) +
geom_jitter(alpha=0.1) +
scale_x_log10(labels = scales::comma) +
scale_y_continuous(labels = scales::percent) +
labs(title="1인당 국민소득과 기대수명",
subtitle="UN 5년 시계열 데이터",
color="대륙",
x="1인당 국민소득",
y="기대수명",
caption="자료출처: http://www.tidyverse.com")  +
theme_classic(base_family="AppleGothic") +
facet_wrap(~continent) +
theme(legend.position = "none")
ggplotly(gapminder_g, tooltip="text")
boxplot <- gapminder_aa_df %>%
ggplot(aes(x=gdpPercap, y=lifeExp, color=continent, text=paste0("1인당 GDP:", gdpPercap,"\n","기대수명?", lifeExp))) +
geom_boxplot(alpha=0.1) +
scale_x_log10(labels = scales::comma) +
scale_y_continuous(labels = scales::percent) +
labs(title="1인당 국민소득과 기대수명",
subtitle="UN 5년 시계열 데이터",
color="대륙",
x="1인당 국민소득",
y="기대수명",
caption="자료출처: http://www.tidyverse.com")  +
theme_classic(base_family="AppleGothic") +
facet_wrap(~continent) +
theme(legend.position = "none")
boxplot
boxplot <- gapminder_aa_df %>%
ggplot(aes(x=gdpPercap, y=lifeExp, color=continent, text=paste0("1인당 GDP:", gdpPercap,"\n","기대수명?", lifeExp))) +
geom_boxplot(alpha=0.1)
boxplot
boxplot <- gapminder %>%
ggplot(aes(x=gdpPercap, y=lifeExp, color=continent, text=paste0("1인당 GDP:", gdpPercap,"\n","기대수명?", lifeExp))) +
geom_boxplot(alpha=0.1)
library(gapminder)
boxplot <- gapminder %>%
ggplot(aes(x=gdpPercap, y=lifeExp, color=continent, text=paste0("1인당 GDP:", gdpPercap,"\n","기대수명?", lifeExp))) +
geom_boxplot(alpha=0.1)
boxplot
boxplot_g <- gapminder %>%
filter(continent %in% c("Africa", "Asia")) %>%
ggplot(aes(x=continent, y=lifeExp, color=continent)) +
geom_boxplot(alpha=0.5)
boxplot
library(gridExtra)
grid.arrage(gapminder_g, boxplot_g, nrow=1)
grid.arrange(gapminder_g, boxplot_g, nrow=1)
#CSV 읽기
data <- read.csv(file = "~/Desktop/data_final.csv", header=T, fileEncoding = "euc-kr")
head(data)
#결측치 처리 (일단 평균으로 대체)
sapply(data,"class")   #factor 중에서 numeric으로 바꿀 필요 있는것이 있을까?
colSums(is.na(data))
data$month[is.na(data$month)] <- mean(data$month, na.rm=TRUE)
data$rain[is.na(data$rain)] <- mean(data$rain, na.rm=TRUE)
#gangsu와 temperature는 factor이고 이상한 '-'가 포함되어 처리 필요
levels(data$gangsu)[levels(data$gangsu)=="-"] <- NA
levels(data$gangsu)
data$gangsu <- as.numeric(as.character(data$gangsu))
data$gangsu[is.na(data$gangsu)] <- mean(data$gangsu, na.rm=TRUE)
levels(data$temperature)[levels(data$temperature)=="-"] <- NA
data$temperature <- as.numeric(as.character(data$temperature))
data$temperature[is.na(data$temperature)] <- mean(data$temperature, na.rm=TRUE)
colSums(is.na(data)) #결측치 처리 완료
#여러 회귀분석 방법 시행
library(caret)
data = data[,-1]#X랑 sido는 '서울특별시'만 담고 있어 회귀하는데 필요가 없다.
data = data[,-5]
head(data)
inTrain <- createDataPartition(y = data$call, p = 0.8, list = FALSE)
training <- data[inTrain, ]
testing <- data[-inTrain, ]
install.packages("doMC")
library("doMC")
getDoParWorkers()
registerDoMC(cores = 2)
getDoParWorkers()
#glm
model_glm <- train(call ~ ., data = training, method = "glm")
#CSV 읽기
data <- read.csv(file = "~/Desktop/data_final.csv", header=T, fileEncoding = "euc-kr")
head(data)
#결측치 처리 (일단 평균으로 대체)
sapply(data,"class")   #factor 중에서 numeric으로 바꿀 필요 있는것이 있을까?
colSums(is.na(data))
data$month[is.na(data$month)] <- mean(data$month, na.rm=TRUE)
data$rain[is.na(data$rain)] <- mean(data$rain, na.rm=TRUE)
#gangsu와 temperature는 factor이고 이상한 '-'가 포함되어 처리 필요
levels(data$gangsu)[levels(data$gangsu)=="-"] <- NA
levels(data$gangsu)
data$gangsu <- as.numeric(as.character(data$gangsu))
data$gangsu[is.na(data$gangsu)] <- mean(data$gangsu, na.rm=TRUE)
levels(data$temperature)[levels(data$temperature)=="-"] <- NA
data$temperature <- as.numeric(as.character(data$temperature))
data$temperature[is.na(data$temperature)] <- mean(data$temperature, na.rm=TRUE)
colSums(is.na(data)) #결측치 처리 완료
#여러 회귀분석 방법 시행
library(caret)
data = data[,-1]#X랑 sido는 '서울특별시'만 담고 있어 회귀하는데 필요가 없다.
data = data[,-5]
head(data)
inTrain <- createDataPartition(y = data$call, p = 0.8, list = FALSE)
training <- data[inTrain, ]
testing <- data[-inTrain, ]
library("doMC") #병렬처리로 시간을 줄이자.
getDoParWorkers()
registerDoMC(cores = 2)
getDoParWorkers()
#glm
model_glm <- train(call ~ ., data = training, method = "glm")
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/jaein/Desktop")
setwd("/Users/jaein/Desktop")
data <- read.csv("bikesharing.csv")
str(data)
sum(colSums(is.na(data)))
data = data[,-c(1:5)]
str(data)
library(corrplot)
corrplot(cor(data),method='number')
df = cor(data)
hc = findCorrelation(df, cutoff=0.9)
library('caret')
df = cor(data)
hc = findCorrelation(df, cutoff=0.9)
reduced_Data = data[,-c(hc)]
print (reduced_Data)
str(reduced_Data)
set.seed(2016147575)
index <- createDataPartition(data$Churn,p=0.7,list=F)
train <- reduced_Data[index,]
index <- createDataPartition(data$Churn,p=0.7,list=F)
index <- createDataPartition(data$count,p=0.7,list=F)
train <- reduced_Data[index,]
test <- reduced_Data[-index,]
model_lm <-lm(count~., data = train)
summary(model_lm)
predict_lm = predict(model_lm ,newdata=data.test))
predict_lm = predict(model_lm ,newdata=data.test)
predict_lm = predict(model_lm ,newdata=test)
install.packages('randomForest')
library(randomForest)
model_rf = randomForest(count~., data=train, ntree=150,imporance=T)
summary(model_rf)
predict_rf = predict(model_rf, newdata=test)
importance(predict_rf)
importance(model_rf)
plot(importance(model_rf))
install.packages('gbm')
library(gbm)
model_gbm <- gbm(count~., data=train, distribution='gaussian', n.trees=5000)
model_gbm <- gbm(count~., data=train, distribution='gaussian', n.trees=5000)
summary(model_gbm)
mean((predict_rf - test$count)^2
mean((predict_rf - test$count)^2)
mean((predict_rf - test$count)^2)
mean((predict_gbm - test$count)^2)
predict_gbm <- predict(model_gbm, newdata =test, n.trees = 5000)
mean((predict_gbm - test$count)^2)
model_gbm <- gbm(count~., data=train, distribution='gaussian', n.trees=2000)
model_gbm <- gbm(count~., data=train, distribution='gaussian', n.trees=2000)
predict_gbm <- predict(model_gbm, newdata =test, n.trees = 2000)
mean((predict_gbm - test$count)^2)
model_gbm <- gbm(count~., data=train, distribution='gaussian', n.trees=200)
model_gbm <- gbm(count~., data=train, distribution='gaussian', n.trees=200)
predict_gbm <- predict(model_gbm, newdata =test, n.trees = 200)
predict_gbm <- predict(model_gbm, newdata =test, n.trees = 200)
mean((predict_gbm - test$count)^2)
```{r}
model_gbm <- gbm(count~., data=train, distribution='gaussian', n.trees=5000)
model_gbm <- gbm(count~., data=train, distribution='gaussian', n.trees=5000)
predict_gbm <- predict(model_gbm, newdata =test, n.trees = 5000)
mean((predict_gbm - test$count)^2)
#Result
```{r}
cbind(MSE1 = mean((predict_lm - test$count)^2),
MSE2 = mean((predict_rf - test$count)^2),
MSE3 = mean((predict_gbm - test$count)^2))
#CSV 읽기
data <- read.csv(file = "~/Desktop/data_final.csv", header=T, fileEncoding = "euc-kr")
head(data)
#결측치 처리 (일단 평균으로 대체)
sapply(data,"class")   #factor 중에서 numeric으로 바꿀 필요 있는것이 있을까?
colSums(is.na(data))
data$month[is.na(data$month)] <- mean(data$month, na.rm=TRUE)
data$rain[is.na(data$rain)] <- mean(data$rain, na.rm=TRUE)
#gangsu와 temperature는 factor이고 이상한 '-'가 포함되어 처리 필요
levels(data$gangsu)[levels(data$gangsu)=="-"] <- NA
levels(data$gangsu)
data$gangsu <- as.numeric(as.character(data$gangsu))
data$gangsu[is.na(data$gangsu)] <- mean(data$gangsu, na.rm=TRUE)
levels(data$temperature)[levels(data$temperature)=="-"] <- NA
data$temperature <- as.numeric(as.character(data$temperature))
data$temperature[is.na(data$temperature)] <- mean(data$temperature, na.rm=TRUE)
colSums(is.na(data)) #결측치 처리 완료
#여러 회귀분석 방법 시행
library(caret)
install.packages('devtools')
library(devtools)
install_github("topepo/caret/pkg/caret")
levels(data$temperature)[levels(data$temperature)=="-"] <- NA
data$temperature <- as.numeric(as.character(data$temperature))
data$temperature[is.na(data$temperature)] <- mean(data$temperature, na.rm=TRUE)
colSums(is.na(data)) #결측치 처리 완료
#여러 회귀분석 방법 시행
library(caret)
install.packages('devtools')
library(devtools)
install_github("topepo/caret/pkg/caret")
data = data[,-1]#X랑 sido는 '서울특별시'만 담고 있어 회귀하는데 필요가 없다.
data = data[,-5]
sapply(data,"class")   #factor 중에서 numeric으로 바꿀 필요 있는것이 있을까?
data = data[,c(-2,-3,-4,-5,-6,-7)]
inTrain <- createDataPartition(y = data$call, p = 0.8, list = FALSE)
training <- data[inTrain, ]
testing <- data[-inTrain, ]
install.packages("devtools")
data <- read.csv(file = "~/Desktop/data_final.csv", header=T, fileEncoding = "euc-kr")
head(data)
#결측치 처리 (일단 평균으로 대체)
sapply(data,"class")   #factor 중에서 numeric으로 바꿀 필요 있는것이 있을까?
colSums(is.na(data))
data$month[is.na(data$month)] <- mean(data$month, na.rm=TRUE)
data$rain[is.na(data$rain)] <- mean(data$rain, na.rm=TRUE)
#gangsu와 temperature는 factor이고 이상한 '-'가 포함되어 처리 필요
levels(data$gangsu)[levels(data$gangsu)=="-"] <- NA
levels(data$gangsu)
data$gangsu <- as.numeric(as.character(data$gangsu))
data$gangsu[is.na(data$gangsu)] <- mean(data$gangsu, na.rm=TRUE)
levels(data$temperature)[levels(data$temperature)=="-"] <- NA
data$temperature <- as.numeric(as.character(data$temperature))
data$temperature[is.na(data$temperature)] <- mean(data$temperature, na.rm=TRUE)
colSums(is.na(data)) #결측치 처리 완료
#여러 회귀분석 방법 시행
library(caret)
install.packages('devtools')
library(devtools)
install_github("topepo/caret/pkg/caret")
data = data[,-1]#X랑 sido는 '서울특별시'만 담고 있어 회귀하는데 필요가 없다.
data = data[,-5]
sapply(data,"class")   #factor 중에서 numeric으로 바꿀 필요 있는것이 있을까?
data = data[,c(-2,-3,-4,-5,-6,-7)]
inTrain <- createDataPartition(y = data$call, p = 0.8, list = FALSE)
training <- data[inTrain, ]
testing <- data[-inTrain, ]
library("doMC") #병렬처리로 시간을 줄이자.
getDoParWorkers()
registerDoMC(cores = 2)
getDoParWorkers()
#glm
model_glm <- train(call ~ ., data = training, method = "glm", preProcess = "medianImpute")
predictions_glm <- predict(model_glm, newdata = testing)
confusionMatrix(predictions_glm, testing$call)
confusionMatrix(table(predictions_glm, testing$call))
type(testing$call)
sapply(testing$call,"class")
typeof(testing$call)
typeof(predictions_glm)
class(predictions_glm)
class(testing$call)
sapply(data,"class")   #factor 중에서 numeric으로 바꿀 필요 있는것이 있을까?
class(testing$call)
class(predictions_glm)
class(predictions_glm)
predictions_glm <- factor(predictions_glm)
class(predictions_glm)
class(testing$call)
testing$call <- factor(testing$call)
class(testing$call)
confusionMatrix(table(predictions_glm, testing$call))
class(testing$call)
confusionMatrix(predictions_glm, testing$call)
#glm
model_glm <- train(call ~ ., data = training, method = "glm", preProcess = "medianImpute")
#CSV 읽기
data <- read.csv(file = "~/Desktop/data_final.csv", header=T, fileEncoding = "euc-kr")
head(data)
#결측치 처리 (일단 평균으로 대체)
sapply(data,"class")   #factor 중에서 numeric으로 바꿀 필요 있는것이 있을까?
colSums(is.na(data))
data$month[is.na(data$month)] <- mean(data$month, na.rm=TRUE)
data$rain[is.na(data$rain)] <- mean(data$rain, na.rm=TRUE)
#gangsu와 temperature는 factor이고 이상한 '-'가 포함되어 처리 필요
levels(data$gangsu)[levels(data$gangsu)=="-"] <- NA
levels(data$gangsu)
data$gangsu <- as.numeric(as.character(data$gangsu))
data$gangsu[is.na(data$gangsu)] <- mean(data$gangsu, na.rm=TRUE)
levels(data$temperature)[levels(data$temperature)=="-"] <- NA
data$temperature <- as.numeric(as.character(data$temperature))
data$temperature[is.na(data$temperature)] <- mean(data$temperature, na.rm=TRUE)
colSums(is.na(data)) #결측치 처리 완료
#여러 회귀분석 방법 시행
library(caret)
library(devtools)
data = data[,-1]#X랑 sido는 '서울특별시'만 담고 있어 회귀하는데 필요가 없다.
data = data[,-5]
sapply(data,"class")   #factor 중에서 numeric으로 바꿀 필요 있는것이 있을까?
data = data[,c(-2,-3,-4,-5,-6,-7)]
inTrain <- createDataPartition(y = data$call, p = 0.8, list = FALSE)
training <- data[inTrain, ]
testing <- data[-inTrain, ]
library("doMC") #병렬처리로 시간을 줄이자.
getDoParWorkers()
registerDoMC(cores = 2)
getDoParWorkers()
#glm
testing$call <- as.factor(testing$call)
model_glm <- train(call ~ ., data = training, method = "glm", preProcess = "medianImpute")
predictions_glm <- predict(model_glm, newdata = testing, type="class")
confusionMatrix(predictions_glm, testing$call)
confusionMatrix(table(predictions_glm, testing$call))
predictions_glm <- predict(model_glm, newdata = testing)
confusionMatrix(predictions_glm, testing$call)
confusionMatrix(table(predictions_glm, testing$call))
levels(predictions_glm)
levels(testing$call)
predictions_glm <- factor(predictions_glm)
levels(predictions_glm)
confusionMatrix(predictions_glm, testing$call)
predictioons_glm
predictions_glm
testing
testing$call
predictions_glm
testing$call
predictions_glm
testing$call
length(predictions_glm)
length(testing$call)
predictions_glm
confusionMatrix(predictions_glm, testing$call)
confusionMatrix(table(predictions_glm, testing$call))
#CSV 읽기
data <- read.csv(file = "~/Desktop/data_final.csv", header=T, fileEncoding = "euc-kr")
head(data)
#결측치 처리 (일단 평균으로 대체)
sapply(data,"class")   #factor 중에서 numeric으로 바꿀 필요 있는것이 있을까?
colSums(is.na(data))
data$month[is.na(data$month)] <- mean(data$month, na.rm=TRUE)
data$rain[is.na(data$rain)] <- mean(data$rain, na.rm=TRUE)
#gangsu와 temperature는 factor이고 이상한 '-'가 포함되어 처리 필요
levels(data$gangsu)[levels(data$gangsu)=="-"] <- NA
levels(data$gangsu)
data$gangsu <- as.numeric(as.character(data$gangsu))
data$gangsu[is.na(data$gangsu)] <- mean(data$gangsu, na.rm=TRUE)
levels(data$temperature)[levels(data$temperature)=="-"] <- NA
data$temperature <- as.numeric(as.character(data$temperature))
data$temperature[is.na(data$temperature)] <- mean(data$temperature, na.rm=TRUE)
colSums(is.na(data)) #결측치 처리 완료
#여러 회귀분석 방법 시행
library(caret)
library(devtools)
data = data[,-1]#X랑 sido는 '서울특별시'만 담고 있어 회귀하는데 필요가 없다.
data = data[,-5]
sapply(data,"class")   #factor 중에서 numeric으로 바꿀 필요 있는것이 있을까?
data = data[,c(-2,-3,-4,-5,-6,-7)]
data$call <- as.factor(data$call) #미리 factor화 하면 confusionMatrix에서 오류 안나?
inTrain <- createDataPartition(y = data$call, p = 0.8, list = FALSE)
training <- data[inTrain, ]
testing <- data[-inTrain, ]
library("doMC") #병렬처리로 시간을 줄이자.
getDoParWorkers()
registerDoMC(cores = 2)
getDoParWorkers()
#glm
testing$call <- as.factor(testing$call)
model_glm <- train(call ~ ., data = training, method = "glm", preProcess = "medianImpute")
predictions_glm <- predict(model_glm, newdata = testing)
confusionMatrix(predictions_glm, testing$call)
predictions_glm
testing$call
predictions_glm$results["RMSE"]
#gam
model_gam <- train(call ~ ., data = training, method = "gam")
address <- read.table("~/Desktop/seouladdress.txt")
colnames(address) <- c("address_by_law","si","gu","dong","exist")
address <- read.table("~/Desktop/seouladdress.txt", fileEncoding = "euc-kr")
colnames(address) <- c("address_by_law","si","gu","dong","exist")
house <- read.csv(file = "~/Desktop/train.csv", fileEncoding = "euc-kr") #header?
head(house)
temp <- left_join(house, address, by = "address_by_law")
library(tidyverse)
temp <- left_join(house, address, by = "address_by_law")
temp %>%
filter(exist=="존재")   ########### No deleted address.
colnames(temp)
house <- left_join(house,address,by="address_by_law")
house <- house %>% select(-exist)                                         ####################### Deleted column
head(temp)
#CSV 읽기
data <- read.csv(file = "~/Desktop/data_final.csv", header=T, fileEncoding = "euc-kr")
install.packages('xaringan')
install.packages("xaringan")
its_eats <- read.csv("data_final.csv",
na.strings = c("","-","NA"),row.names = 1,  fileEncoding = "euc-kr")
getwd()
setwd('~/Desktop/Xaringan_finla/')
its_eats <- read.csv("data_final.csv", na.strings = c("","-","NA"),row.names = 1,  fileEncoding = "euc-kr")
nrow(its_eats)
its_eats <- read.csv("data_final.csv", na.strings = c("","-","NA"),row.names = 1,  fileEncoding = "euc-kr")
nrow(its_eats)
its_eats <- read.csv("data_final.csv", na.strings = c("","-","NA"),row.names = 1,  fileEncoding = "euc-kr")
nrow(its_eats)
its_eats$date <- as.factor(its_eats$date)
its_eats$month <- as.factor(its_eats$month)
its_eats$rain <- as.factor(its_eats$rain)
its_eats$gangsu [is.na(its_eats$gangsu)] <- "NA"
its_eats$temperature[is.na(its_eats$temperature)] <- "NA"
its_eats$gangsu <- as.factor(its_eats$gangsu)
its_eats$temperature <- as.factor(its_eats$temperature)
library(tidyverse)
#10대, 20대 불러오기
teentwenty <- its_eats %>%
filter(age=="10대"| age=="20대")
#30대, 40대 합치기
thirtyfourty <- its_eats %>%
filter(age=="30대"| age=="40대")
thirtyfourty_abbrev <- aggregate(call~date+day+gender+sido+region+
dong+type+month+gangsu+rain+
temperature,data=thirtyfourty,
FUN=sum)
thirtyfourty_abbrev$age <- "30대40대"
#50대, 60대 합치기
fiftysixty <- its_eats %>%
filter(age=="50대" | age =="60대이상")
fiftysixty_abbrev <- aggregate(call~date+day+gender+sido+region+
dong+type+month+gangsu+rain+
temperature,data=fiftysixty,
FUN=sum)
fiftysixty_abbrev$age <- "50대이상"
its_eats <- bind_rows(teentwenty,thirtyfourty_abbrev,
fiftysixty_abbrev)
its_eats$age <- as.factor(its_eats$age)
levels(its_eats$age)
nrow(its_eats)
its_eats <- read.csv("final_0606.csv", header = TRUE,  fileEncoding = "euc-kr")
its_eats <- its_eats[,-1]
knitr::kable(head(its_eats),format = "html")
its_eats_1 <- its_eats
its_eats_1$day.x <- as.character(its_eats_1$day.x)
its_eats_1$day.x <- factor(its_eats_1$day.x,
levels=c("월","화","수","목","금","토","일"))
calls <- its_eats_1 %>%
group_by(type,date) %>%
dplyr::summarise(total=sum(call))
calls$date <- paste(str_sub(calls$date,start=1,end=4),
"-",
str_sub(calls$date,start=5,end=6),
"-",
str_sub(calls$date,start=7,end=8),
sep="")
calls$date <- as.Date(calls$date)
calls$month <- as.numeric(as.POSIXlt(calls$date)$mon+1)
# 월 변수 추가
calls$monthf <- factor(calls$month,levels=as.character(1:12),
labels = c("Jan","Feb","Mar","Apr",
"May","Jun","Jul","Aug",
"Sep","Oct","Nov","Dec"),
ordered = TRUE) # 월 이름 추가
calls$weekday <- as.POSIXlt(calls$date)$wday
calls$weekdayf <- factor(calls$weekday, levels= c(0,6,5,4,3,2,1),
labels=rev(c("Mon","Tue","Wed","Thu",
"Fri","Sat","Sun")),
ordered=TRUE)
calls$yearmonth <- zoo::as.yearmon(calls$date)
calls$yearmonthf <- factor(calls$yearmonth)
calls$week <- as.numeric(format(as.Date(calls$date),
"%W"))
```{r message=FALSE}
library(plyr)
calls <- ddply(calls,.(yearmonthf),transform,
monthweek=1+week-min(week))
p1 <- ggplot(calls,aes(monthweek,weekdayf,fill=total)) +
geom_tile(colour="white") + facet_grid(type~monthf) +
scale_fill_gradient(low="yellow",high="red")
p1
